"""
Sudoku solver by ThatPythonKid

"""

###############################################################################################


"""
Info to understand the code:

    len(b) is how many lists inside board (columns)
    len(b[0-8]) is how long each list(row) is
    
    for i in range(len(b)):               - for each row
        for j in range(len(b[0])):        - for each integer (in each row) (loop is run 9 times for each line (81 times - 81 numbers) )

    pos = (y,x) (first line and column start at 0 not 1)
    
    (2,7) = 3 down, 8 across = 6
"""


board = [
    [3,5,0,0,7,0,0,0,0],
    [6,0,0,1,9,5,0,0,0],
    [0,9,8,0,0,0,0,6,0],
    [8,0,0,0,6,0,0,0,3],
    [4,0,0,8,0,3,0,0,1],
    [7,0,0,0,2,0,0,0,6],
    [0,6,0,0,0,0,2,8,0],
    [0,0,0,4,1,9,0,0,5],
    [0,0,0,0,8,0,0,7,9]
]

def solve(b):

    mt = empty_space(b)
    
    if mt:
        row, col = mt
    else:
        return True
    
    for i in range(1,10): #nums 1-9
        if valid(b,i,(row,col)):
           
            b[row][col] = i
            

            if solve(b): #runs up to this point and then tries the next number
                return True
            
            b[row][col] = 0
            
    return False



def valid(b, num, pos):
    #check if in row
    if num in b[pos[0]]:
        return False
    
    #print("Not in row") 
    
    #check if in column
    for i in range(0,len(b)):
        if b[i][pos[1]] == num:
            #print("In column") 
            return False
    #print("Not in column") 

    #check if in box
    box_x = pos[1]//3 #if pos is 2,7 (pos[1] = 7): 7 // 3 = 2 (2 is the last box out of the three boxes 0-2 on the x axis)
    box_y = pos[0]//3 #              (pos[0] = 2): 2 // 3 = 0 (0 is the first box on the y axis)
    
    #(// devides and always rounds down eg. ans of 3.9 = 3)

    for i in range(box_y *3,box_y *3 +3): #the begging x value of the box to the last in the box (its +3 as there are 3 values in each box
        for j in range(box_x *3,box_x *3 +3):
            if b[i][j] == num and (i,j) != pos:
                #print("In box")
                return False
            
    #print("Not in Box")
    #print("Valid")
            
    return True

   #if it passes all the checks, valid() = True

def empty_space(b):
    #search though every space until a pos = 0
    for i in range(len(b)):        
        for j in range(len(b[0])):
            if b[i][j] == 0:
                return (i,j)
                #emptyspace(board) = position of the empty space
    return None 


def print_board(b):
    for i in range(len(b)):
        #for every list

        if i % 3 == 0 and i != 0: #if it has printed a row that is divisible by 3
            print("―――――― ――――――― ――――――")

        for j in range(len(b[0])):
            #for every character
            if j % 3 == 0 and j != 0: #if it has printed 3 integers
                print("│ ", end="")
            if j == 8:
                print(b[i][j])
            else:
                print(b[i][j],"",end="")

print("Starter Board...\n")
print_board(board)
print("\nCompleted Board...\n")
solve(board)
print_board(board)

